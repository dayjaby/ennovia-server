// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Ennovia {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2eproto();
void protobuf_AssignDesc_server_2eproto();
void protobuf_ShutdownFile_server_2eproto();

class NoData;
class OptionRef;
class ServerMessage;
class SendTileOptionList;
class SendLocatableOptionList;
class MoveTo;
class SendRSAKey;
class YouAre;
class LocatablePosition;
class IntroduceLocatable;
class SendMapData;

// ===================================================================

class NoData : public ::google::protobuf::Message {
 public:
  NoData();
  virtual ~NoData();

  NoData(const NoData& from);

  inline NoData& operator=(const NoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoData& default_instance();

  void Swap(NoData* other);

  // implements Message ----------------------------------------------

  NoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoData& from);
  void MergeFrom(const NoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Ennovia.NoData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static NoData* default_instance_;
};
// -------------------------------------------------------------------

class OptionRef : public ::google::protobuf::Message {
 public:
  OptionRef();
  virtual ~OptionRef();

  OptionRef(const OptionRef& from);

  inline OptionRef& operator=(const OptionRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionRef& default_instance();

  void Swap(OptionRef* other);

  // implements Message ----------------------------------------------

  OptionRef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionRef& from);
  void MergeFrom(const OptionRef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required int32 optionList = 3;
  inline bool has_optionlist() const;
  inline void clear_optionlist();
  static const int kOptionListFieldNumber = 3;
  inline ::google::protobuf::int32 optionlist() const;
  inline void set_optionlist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Ennovia.OptionRef)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_optionlist();
  inline void clear_has_optionlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 optionlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static OptionRef* default_instance_;
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::Message {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  void Swap(ServerMessage* other);

  // implements Message ----------------------------------------------

  ServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Ennovia.ServerMessage)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class SendTileOptionList : public ::google::protobuf::Message {
 public:
  SendTileOptionList();
  virtual ~SendTileOptionList();

  SendTileOptionList(const SendTileOptionList& from);

  inline SendTileOptionList& operator=(const SendTileOptionList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendTileOptionList& default_instance();

  void Swap(SendTileOptionList* other);

  // implements Message ----------------------------------------------

  SendTileOptionList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendTileOptionList& from);
  void MergeFrom(const SendTileOptionList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 map = 1;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 1;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);

  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // repeated .Ennovia.OptionRef options = 4;
  inline int options_size() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 4;
  inline const ::Ennovia::OptionRef& options(int index) const;
  inline ::Ennovia::OptionRef* mutable_options(int index);
  inline ::Ennovia::OptionRef* add_options();
  inline const ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >&
      options() const;
  inline ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >*
      mutable_options();

  // @@protoc_insertion_point(class_scope:Ennovia.SendTileOptionList)
 private:
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 map_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef > options_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static SendTileOptionList* default_instance_;
};
// -------------------------------------------------------------------

class SendLocatableOptionList : public ::google::protobuf::Message {
 public:
  SendLocatableOptionList();
  virtual ~SendLocatableOptionList();

  SendLocatableOptionList(const SendLocatableOptionList& from);

  inline SendLocatableOptionList& operator=(const SendLocatableOptionList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendLocatableOptionList& default_instance();

  void Swap(SendLocatableOptionList* other);

  // implements Message ----------------------------------------------

  SendLocatableOptionList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendLocatableOptionList& from);
  void MergeFrom(const SendLocatableOptionList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .Ennovia.OptionRef options = 2;
  inline int options_size() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 2;
  inline const ::Ennovia::OptionRef& options(int index) const;
  inline ::Ennovia::OptionRef* mutable_options(int index);
  inline ::Ennovia::OptionRef* add_options();
  inline const ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >&
      options() const;
  inline ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >*
      mutable_options();

  // @@protoc_insertion_point(class_scope:Ennovia.SendLocatableOptionList)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef > options_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static SendLocatableOptionList* default_instance_;
};
// -------------------------------------------------------------------

class MoveTo : public ::google::protobuf::Message {
 public:
  MoveTo();
  virtual ~MoveTo();

  MoveTo(const MoveTo& from);

  inline MoveTo& operator=(const MoveTo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveTo& default_instance();

  void Swap(MoveTo* other);

  // implements Message ----------------------------------------------

  MoveTo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveTo& from);
  void MergeFrom(const MoveTo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Ennovia.MoveTo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static MoveTo* default_instance_;
};
// -------------------------------------------------------------------

class SendRSAKey : public ::google::protobuf::Message {
 public:
  SendRSAKey();
  virtual ~SendRSAKey();

  SendRSAKey(const SendRSAKey& from);

  inline SendRSAKey& operator=(const SendRSAKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRSAKey& default_instance();

  void Swap(SendRSAKey* other);

  // implements Message ----------------------------------------------

  SendRSAKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRSAKey& from);
  void MergeFrom(const SendRSAKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Ennovia.SendRSAKey)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static SendRSAKey* default_instance_;
};
// -------------------------------------------------------------------

class YouAre : public ::google::protobuf::Message {
 public:
  YouAre();
  virtual ~YouAre();

  YouAre(const YouAre& from);

  inline YouAre& operator=(const YouAre& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YouAre& default_instance();

  void Swap(YouAre* other);

  // implements Message ----------------------------------------------

  YouAre* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YouAre& from);
  void MergeFrom(const YouAre& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Ennovia.YouAre)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static YouAre* default_instance_;
};
// -------------------------------------------------------------------

class LocatablePosition : public ::google::protobuf::Message {
 public:
  LocatablePosition();
  virtual ~LocatablePosition();

  LocatablePosition(const LocatablePosition& from);

  inline LocatablePosition& operator=(const LocatablePosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocatablePosition& default_instance();

  void Swap(LocatablePosition* other);

  // implements Message ----------------------------------------------

  LocatablePosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocatablePosition& from);
  void MergeFrom(const LocatablePosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 map = 2;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 2;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);

  // required float x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Ennovia.LocatablePosition)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 map_;
  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static LocatablePosition* default_instance_;
};
// -------------------------------------------------------------------

class IntroduceLocatable : public ::google::protobuf::Message {
 public:
  IntroduceLocatable();
  virtual ~IntroduceLocatable();

  IntroduceLocatable(const IntroduceLocatable& from);

  inline IntroduceLocatable& operator=(const IntroduceLocatable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntroduceLocatable& default_instance();

  void Swap(IntroduceLocatable* other);

  // implements Message ----------------------------------------------

  IntroduceLocatable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntroduceLocatable& from);
  void MergeFrom(const IntroduceLocatable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string model = 4;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string texture = 5;
  inline bool has_texture() const;
  inline void clear_texture();
  static const int kTextureFieldNumber = 5;
  inline const ::std::string& texture() const;
  inline void set_texture(const ::std::string& value);
  inline void set_texture(const char* value);
  inline void set_texture(const char* value, size_t size);
  inline ::std::string* mutable_texture();
  inline ::std::string* release_texture();
  inline void set_allocated_texture(::std::string* texture);

  // @@protoc_insertion_point(class_scope:Ennovia.IntroduceLocatable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_texture();
  inline void clear_has_texture();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::std::string* model_;
  ::std::string* texture_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static IntroduceLocatable* default_instance_;
};
// -------------------------------------------------------------------

class SendMapData : public ::google::protobuf::Message {
 public:
  SendMapData();
  virtual ~SendMapData();

  SendMapData(const SendMapData& from);

  inline SendMapData& operator=(const SendMapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMapData& default_instance();

  void Swap(SendMapData* other);

  // implements Message ----------------------------------------------

  SendMapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMapData& from);
  void MergeFrom(const SendMapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required string heightmap = 3;
  inline bool has_heightmap() const;
  inline void clear_heightmap();
  static const int kHeightmapFieldNumber = 3;
  inline const ::std::string& heightmap() const;
  inline void set_heightmap(const ::std::string& value);
  inline void set_heightmap(const char* value);
  inline void set_heightmap(const char* value, size_t size);
  inline ::std::string* mutable_heightmap();
  inline ::std::string* release_heightmap();
  inline void set_allocated_heightmap(::std::string* heightmap);

  // required int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Ennovia.SendMapData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_heightmap();
  inline void clear_has_heightmap();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 width_;
  ::std::string* heightmap_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static SendMapData* default_instance_;
};
// ===================================================================


// ===================================================================

// NoData

// -------------------------------------------------------------------

// OptionRef

// required int32 index = 1;
inline bool OptionRef::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionRef::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionRef::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionRef::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 OptionRef::index() const {
  return index_;
}
inline void OptionRef::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string description = 2;
inline bool OptionRef::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionRef::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionRef::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionRef::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& OptionRef::description() const {
  return *description_;
}
inline void OptionRef::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void OptionRef::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void OptionRef::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OptionRef::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* OptionRef::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OptionRef::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 optionList = 3;
inline bool OptionRef::has_optionlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionRef::set_has_optionlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionRef::clear_has_optionlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionRef::clear_optionlist() {
  optionlist_ = 0;
  clear_has_optionlist();
}
inline ::google::protobuf::int32 OptionRef::optionlist() const {
  return optionlist_;
}
inline void OptionRef::set_optionlist(::google::protobuf::int32 value) {
  set_has_optionlist();
  optionlist_ = value;
}

// -------------------------------------------------------------------

// ServerMessage

// required string text = 1;
inline bool ServerMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMessage::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMessage::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ServerMessage::text() const {
  return *text_;
}
inline void ServerMessage::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ServerMessage::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ServerMessage::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ServerMessage::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMessage::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendTileOptionList

// required int32 map = 1;
inline bool SendTileOptionList::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendTileOptionList::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendTileOptionList::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendTileOptionList::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 SendTileOptionList::map() const {
  return map_;
}
inline void SendTileOptionList::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// required int32 x = 2;
inline bool SendTileOptionList::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendTileOptionList::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendTileOptionList::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendTileOptionList::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 SendTileOptionList::x() const {
  return x_;
}
inline void SendTileOptionList::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 3;
inline bool SendTileOptionList::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendTileOptionList::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendTileOptionList::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendTileOptionList::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 SendTileOptionList::y() const {
  return y_;
}
inline void SendTileOptionList::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// repeated .Ennovia.OptionRef options = 4;
inline int SendTileOptionList::options_size() const {
  return options_.size();
}
inline void SendTileOptionList::clear_options() {
  options_.Clear();
}
inline const ::Ennovia::OptionRef& SendTileOptionList::options(int index) const {
  return options_.Get(index);
}
inline ::Ennovia::OptionRef* SendTileOptionList::mutable_options(int index) {
  return options_.Mutable(index);
}
inline ::Ennovia::OptionRef* SendTileOptionList::add_options() {
  return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >&
SendTileOptionList::options() const {
  return options_;
}
inline ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >*
SendTileOptionList::mutable_options() {
  return &options_;
}

// -------------------------------------------------------------------

// SendLocatableOptionList

// required int32 id = 1;
inline bool SendLocatableOptionList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendLocatableOptionList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendLocatableOptionList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendLocatableOptionList::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SendLocatableOptionList::id() const {
  return id_;
}
inline void SendLocatableOptionList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .Ennovia.OptionRef options = 2;
inline int SendLocatableOptionList::options_size() const {
  return options_.size();
}
inline void SendLocatableOptionList::clear_options() {
  options_.Clear();
}
inline const ::Ennovia::OptionRef& SendLocatableOptionList::options(int index) const {
  return options_.Get(index);
}
inline ::Ennovia::OptionRef* SendLocatableOptionList::mutable_options(int index) {
  return options_.Mutable(index);
}
inline ::Ennovia::OptionRef* SendLocatableOptionList::add_options() {
  return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >&
SendLocatableOptionList::options() const {
  return options_;
}
inline ::google::protobuf::RepeatedPtrField< ::Ennovia::OptionRef >*
SendLocatableOptionList::mutable_options() {
  return &options_;
}

// -------------------------------------------------------------------

// MoveTo

// required int32 id = 1;
inline bool MoveTo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveTo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveTo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveTo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MoveTo::id() const {
  return id_;
}
inline void MoveTo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required float x = 2;
inline bool MoveTo::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveTo::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveTo::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveTo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MoveTo::x() const {
  return x_;
}
inline void MoveTo::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 3;
inline bool MoveTo::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveTo::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveTo::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveTo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MoveTo::y() const {
  return y_;
}
inline void MoveTo::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// SendRSAKey

// -------------------------------------------------------------------

// YouAre

// required int32 id = 1;
inline bool YouAre::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouAre::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouAre::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouAre::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 YouAre::id() const {
  return id_;
}
inline void YouAre::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// LocatablePosition

// required int32 id = 1;
inline bool LocatablePosition::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocatablePosition::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocatablePosition::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocatablePosition::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LocatablePosition::id() const {
  return id_;
}
inline void LocatablePosition::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 map = 2;
inline bool LocatablePosition::has_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocatablePosition::set_has_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocatablePosition::clear_has_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocatablePosition::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 LocatablePosition::map() const {
  return map_;
}
inline void LocatablePosition::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// required float x = 3;
inline bool LocatablePosition::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocatablePosition::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocatablePosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocatablePosition::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float LocatablePosition::x() const {
  return x_;
}
inline void LocatablePosition::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 4;
inline bool LocatablePosition::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocatablePosition::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocatablePosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocatablePosition::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float LocatablePosition::y() const {
  return y_;
}
inline void LocatablePosition::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// IntroduceLocatable

// required int32 id = 1;
inline bool IntroduceLocatable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntroduceLocatable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntroduceLocatable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntroduceLocatable::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 IntroduceLocatable::id() const {
  return id_;
}
inline void IntroduceLocatable::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool IntroduceLocatable::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntroduceLocatable::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntroduceLocatable::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntroduceLocatable::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 IntroduceLocatable::type() const {
  return type_;
}
inline void IntroduceLocatable::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string name = 3;
inline bool IntroduceLocatable::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntroduceLocatable::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IntroduceLocatable::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IntroduceLocatable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IntroduceLocatable::name() const {
  return *name_;
}
inline void IntroduceLocatable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IntroduceLocatable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IntroduceLocatable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IntroduceLocatable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* IntroduceLocatable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IntroduceLocatable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model = 4;
inline bool IntroduceLocatable::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntroduceLocatable::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IntroduceLocatable::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IntroduceLocatable::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& IntroduceLocatable::model() const {
  return *model_;
}
inline void IntroduceLocatable::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void IntroduceLocatable::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void IntroduceLocatable::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IntroduceLocatable::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* IntroduceLocatable::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IntroduceLocatable::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string texture = 5;
inline bool IntroduceLocatable::has_texture() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntroduceLocatable::set_has_texture() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IntroduceLocatable::clear_has_texture() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IntroduceLocatable::clear_texture() {
  if (texture_ != &::google::protobuf::internal::kEmptyString) {
    texture_->clear();
  }
  clear_has_texture();
}
inline const ::std::string& IntroduceLocatable::texture() const {
  return *texture_;
}
inline void IntroduceLocatable::set_texture(const ::std::string& value) {
  set_has_texture();
  if (texture_ == &::google::protobuf::internal::kEmptyString) {
    texture_ = new ::std::string;
  }
  texture_->assign(value);
}
inline void IntroduceLocatable::set_texture(const char* value) {
  set_has_texture();
  if (texture_ == &::google::protobuf::internal::kEmptyString) {
    texture_ = new ::std::string;
  }
  texture_->assign(value);
}
inline void IntroduceLocatable::set_texture(const char* value, size_t size) {
  set_has_texture();
  if (texture_ == &::google::protobuf::internal::kEmptyString) {
    texture_ = new ::std::string;
  }
  texture_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IntroduceLocatable::mutable_texture() {
  set_has_texture();
  if (texture_ == &::google::protobuf::internal::kEmptyString) {
    texture_ = new ::std::string;
  }
  return texture_;
}
inline ::std::string* IntroduceLocatable::release_texture() {
  clear_has_texture();
  if (texture_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = texture_;
    texture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IntroduceLocatable::set_allocated_texture(::std::string* texture) {
  if (texture_ != &::google::protobuf::internal::kEmptyString) {
    delete texture_;
  }
  if (texture) {
    set_has_texture();
    texture_ = texture;
  } else {
    clear_has_texture();
    texture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendMapData

// required int32 id = 1;
inline bool SendMapData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMapData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMapData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMapData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SendMapData::id() const {
  return id_;
}
inline void SendMapData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string path = 2;
inline bool SendMapData::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMapData::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMapData::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMapData::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& SendMapData::path() const {
  return *path_;
}
inline void SendMapData::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SendMapData::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SendMapData::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMapData::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* SendMapData::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendMapData::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string heightmap = 3;
inline bool SendMapData::has_heightmap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMapData::set_has_heightmap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMapData::clear_has_heightmap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMapData::clear_heightmap() {
  if (heightmap_ != &::google::protobuf::internal::kEmptyString) {
    heightmap_->clear();
  }
  clear_has_heightmap();
}
inline const ::std::string& SendMapData::heightmap() const {
  return *heightmap_;
}
inline void SendMapData::set_heightmap(const ::std::string& value) {
  set_has_heightmap();
  if (heightmap_ == &::google::protobuf::internal::kEmptyString) {
    heightmap_ = new ::std::string;
  }
  heightmap_->assign(value);
}
inline void SendMapData::set_heightmap(const char* value) {
  set_has_heightmap();
  if (heightmap_ == &::google::protobuf::internal::kEmptyString) {
    heightmap_ = new ::std::string;
  }
  heightmap_->assign(value);
}
inline void SendMapData::set_heightmap(const char* value, size_t size) {
  set_has_heightmap();
  if (heightmap_ == &::google::protobuf::internal::kEmptyString) {
    heightmap_ = new ::std::string;
  }
  heightmap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMapData::mutable_heightmap() {
  set_has_heightmap();
  if (heightmap_ == &::google::protobuf::internal::kEmptyString) {
    heightmap_ = new ::std::string;
  }
  return heightmap_;
}
inline ::std::string* SendMapData::release_heightmap() {
  clear_has_heightmap();
  if (heightmap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = heightmap_;
    heightmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendMapData::set_allocated_heightmap(::std::string* heightmap) {
  if (heightmap_ != &::google::protobuf::internal::kEmptyString) {
    delete heightmap_;
  }
  if (heightmap) {
    set_has_heightmap();
    heightmap_ = heightmap;
  } else {
    clear_has_heightmap();
    heightmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 width = 4;
inline bool SendMapData::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMapData::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMapData::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMapData::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 SendMapData::width() const {
  return width_;
}
inline void SendMapData::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 5;
inline bool SendMapData::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendMapData::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendMapData::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendMapData::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 SendMapData::height() const {
  return height_;
}
inline void SendMapData::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Ennovia

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
